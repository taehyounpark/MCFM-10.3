!
!  SPDX-License-Identifier: GPL-3.0-or-later
!  Copyright (C) 2019-2022, respective authors of MCFM.
!

c********************************************************
cAUTHOR: FABIO MALTONI                                  *
cDATE  : 3/18/2002                                      *
cNOTES : PROGRAM GENERATED BY WRITE_VIRTUALS.M          *
c********************************************************

      function BBGHVIRT(I1,I2,I3)
      implicit none
      include 'types.f'
      real(dp):: BBGHVIRT
c ---------------------------------------------------------------------
c returns the interference between 1-loop amplitude and tree amplitude

c 2 Re(AMP_LO AMP_VIRT^* )

c for the process:
c          0 -> bbar1 b2 g3 h

c All momenta outgoing.
c No averaging is performed for initial spins or colors.
c Higgs-bottom and strong couplings are included.
c Virtual contributions calculated in DRED.
c UV divergences are subtracted here in the MSbar scheme.
c IR divergences are present as epinv^2 and epinv terms.
c If you want to use this subroutine for b bbar -> h g or h-> b bbar g
c you only have to modifiy the sign of the born and of 'term'.
c ---------------------------------------------------------------------

      INCLUDE 'constants.f'
      INCLUDE 'mxpart.f'
      INCLUDE 'epinv.f'
      INCLUDE 'epinv2.f'
      include 'sprods_com.f'
      INCLUDE 'qcdcouple.f'
      INCLUDE 'scale.f'
      INCLUDE 'b0.f'

c     ARGUMENTS
      integer:: I1,I2,I3

c     EXTERNAL
      real(dp):: ddilog

c     LOCAL
      real(dp):: SS,TT,UU,SN,TN,UN,MH2
      complex(dp):: LNRAT
      complex(dp):: xlns,xlnt,xlnu,xlnsm,xlntm,xlnum
      complex(dp):: xlnmh
      complex(dp):: xln1ms,xln1mt,xln1mu
      real(dp):: dilogs,dilogt,dilogu
      real(dp):: c0t,c0u,c0ms,c0mt,c0mu,d0st,d0su,d0tu
      real(dp):: born,term

c     coupsq=susycoup**2*ghbb**2  => as in the Born function

      real(dp):: coupsq
      coupsq=1._dp   !change this



      mh2=s(i1,i2)+s(i1,i3)+s(i2,i3)
      ss =s(i1,i2)
      tt =s(i1,i3)
      uu =s(i2,i3)
      sn =s(i1,i2)/mh2
      tn =s(i1,i3)/mh2
      un =s(i2,i3)/mh2

c compute the logs and the dilogs
c the analytic continuation is performed by lnrat

               xlns =lnrat(-ss,-mh2)
               xlnt =lnrat(-tt,-mh2)

               xlnu =lnrat(-uu,-mh2)
               xlnmh=lnrat(-mh2,musq)
               xlnsm=lnrat(-ss ,musq)
               xlntm=lnrat(-tt ,musq)
               xlnum=lnrat(-uu ,musq)
               xln1ms=lnrat(-mh2+ss,-mh2)
               xln1mt=lnrat(-mh2+tt,-mh2)
               xln1mu=lnrat(-mh2+uu,-mh2)
               dilogs=ddilog(sn)
               dilogt=ddilog(tn)
               dilogu=ddilog(un)

c compute the scalar integrals
c the following integrals are dimensionless,
c and are defined as in the tex notes,
c and have a 1/(16 pi^2)*c_\Gamma understood in front
c where c_\Gamma= (4 pi)^eps Gamma(1+eps) Gamma(1-eps)^2/Gamma(1-2eps)

           c0t= real(epinv*epinv2 - epinv*xlntm + xlntm**2/2._dp)
           c0u= real(epinv*epinv2 - epinv*xlnum + xlnum**2/2._dp)
           c0ms=real(epinv*xlns + (xlnmh**2 - xlnsm**2)/2._dp)
           c0mt=real(epinv*xlnt + (xlnmh**2 - xlntm**2)/2._dp)
           c0mu=real(epinv*xlnu + (xlnmh**2 - xlnum**2)/2._dp)
           d0su=real(
     &    2._dp*(-dilogs - dilogu + epinv*epinv2 + pisq/6._dp - epinv*xlnmh+
     &    xlnmh**2/2._dp - epinv*xlns - xln1ms*xlns + xlnmh*xlns +
     &    xlns**2/2._dp - epinv*xlnu - xln1mu*xlnu + xlnmh*xlnu +
     &    xlns*xlnu + xlnu**2/2._dp))
           d0st=real(
     &    2._dp*(-dilogs - dilogt + epinv*epinv2 + pisq/6._dp - epinv*xlnmh+
     &    xlnmh**2/2._dp - epinv*xlns - xln1ms*xlns + xlnmh*xlns +
     &    xlns**2/2._dp - epinv*xlnt - xln1mt*xlnt + xlnmh*xlnt +
     &    xlns*xlnt + xlnt**2/2._dp))
           d0tu=real(
     &    2._dp*(-dilogt - dilogu + epinv*epinv2 + pisq/6._dp - epinv*xlnmh+
     &    xlnmh**2/2._dp - epinv*xlnt - xln1mt*xlnt + xlnmh*xlnt +
     &    xlnt**2/2._dp - epinv*xlnu - xln1mu*xlnu + xlnmh*xlnu +
     &    xlnt*xlnu + xlnu**2/2._dp))

c the sign of born and term is valid only for g b->b h

           born  =  -(16._dp*(1._dp+sn**2)/tn/un)*gsq*coupsq
           term  =  -(16._dp*(1._dp-sn)   /tn/un)*gsq*coupsq

c final result

         BBGHVIRT=(CA-CF)*term+
     &    BORN*(CF*(-2._dp*c0ms - c0mt - c0mu + c0t + c0u - d0st -
     &    d0su) + (CA*(2._dp*c0ms - 2._dp*c0t - 2._dp*c0u + d0st + d0su-
     &         d0tu))/2._dp)

           BBGHVIRT=ason2pi*BBGHVIRT

c UV renormalization of the strong coupling in DRED-MSbar
c and finite renormalization to standard MSbar

           BBGHVIRT=BBGHVIRT+ason2pi*born*(-(epinv)*b0+CA/6._dp)

c UV renormalization of the Yukawa coupling in DRED-MSbar
c and finite renormalization to standard MSbar

           BBGHVIRT=BBGHVIRT+ason2pi*born*(-(epinv)*3._dp*CF-CF)

         END

